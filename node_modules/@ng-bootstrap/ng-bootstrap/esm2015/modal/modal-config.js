import { Injectable } from '@angular/core';
import { NgbConfig } from '../ngb-config';
import * as i0 from "@angular/core";
import * as i1 from "../ngb-config";
/**
 * A configuration service for the [`NgbModal`](#/components/modal/api#NgbModal) service.
 *
 * You can inject this service, typically in your root component, and customize the values of its properties in
 * order to provide default values for all modals used in the application.
*
* @since 3.1.0
*/
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../ngb-config';
export class NgbModalConfig {
    constructor(_ngbConfig) {
        this._ngbConfig = _ngbConfig;
        this.backdrop = true;
        this.keyboard = true;
    }
    get animation() { return (this._animation === undefined) ? this._ngbConfig.animation : this._animation; }
    set animation(animation) { this._animation = animation; }
}
NgbModalConfig.ɵfac = function NgbModalConfig_Factory(t) { return new (t || NgbModalConfig)(ɵngcc0.ɵɵinject(ɵngcc1.NgbConfig)); };
NgbModalConfig.ɵprov = i0.ɵɵdefineInjectable({ factory: function NgbModalConfig_Factory() { return new NgbModalConfig(i0.ɵɵinject(i1.NgbConfig)); }, token: NgbModalConfig, providedIn: "root" });
NgbModalConfig.ctorParameters = () => [
    { type: NgbConfig }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgbModalConfig, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return [{ type: ɵngcc1.NgbConfig }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kYWwtY29uZmlnLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbW9kYWwvbW9kYWwtY29uZmlnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxVQUFVLEVBQVcsTUFBTSxlQUFlLENBQUM7QUFDbkQsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUFDO0FBR1o7QUEwRzdCO0FBQUk7QUFDcUY7QUFDeEY7QUFDNEc7QUFDdEM7QUFBRTtBQUVoRSxFQUNQOzs7QUFFRixNQUFNLE9BQU8sY0FBYztBQUFHLElBaUI1QixZQUFvQixVQUFxQjtBQUFJLFFBQXpCLGVBQVUsR0FBVixVQUFVLENBQVc7QUFBQyxRQWQxQyxhQUFRLEdBQXVCLElBQUksQ0FBQztBQUFDLFFBS3JDLGFBQVEsR0FBRyxJQUFJLENBQUM7QUFBQyxJQVMyQixDQUFDO0FBQUMsSUFFOUMsSUFBSSxTQUFTLEtBQWMsT0FBTyxDQUFDLElBQUksQ0FBQyxVQUFVLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztBQUFDLElBQ25ILElBQUksU0FBUyxDQUFDLFNBQWtCLElBQUksSUFBSSxDQUFDLFVBQVUsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDO0FBQUM7a0lBQ3JFO0FBQUMsa01BckJHO0FBQUM7RUFESixVQUFVLFNBQUMsRUFBQyx2QkFDZ0MsWUF0SHJDLFNBQVM7QUFBRztNQXFIRyxFQUFFLE1BQU0sRUFBQzs7OzBFQXJIVjtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3RhYmxlLCBJbmplY3Rvcn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7TmdiQ29uZmlnfSBmcm9tICcuLi9uZ2ItY29uZmlnJztcclxuXHJcbi8qKlxyXG4gKiBPcHRpb25zIGF2YWlsYWJsZSB3aGVuIG9wZW5pbmcgbmV3IG1vZGFsIHdpbmRvd3Mgd2l0aCBgTmdiTW9kYWwub3BlbigpYCBtZXRob2QuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIE5nYk1vZGFsT3B0aW9ucyB7XHJcbiAgLyoqXHJcbiAgICogSWYgYHRydWVgLCBtb2RhbCBvcGVuaW5nIGFuZCBjbG9zaW5nIHdpbGwgYmUgYW5pbWF0ZWQuXHJcbiAgICpcclxuICAgKiBAc2luY2UgOC4wLjBcclxuICAgKi9cclxuICBhbmltYXRpb24/OiBib29sZWFuO1xyXG5cclxuICAvKipcclxuICAgKiBgYXJpYS1sYWJlbGxlZGJ5YCBhdHRyaWJ1dGUgdmFsdWUgdG8gc2V0IG9uIHRoZSBtb2RhbCB3aW5kb3cuXHJcbiAgICpcclxuICAgKiBAc2luY2UgMi4yLjBcclxuICAgKi9cclxuICBhcmlhTGFiZWxsZWRCeT86IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogYGFyaWEtZGVzY3JpYmVkYnlgIGF0dHJpYnV0ZSB2YWx1ZSB0byBzZXQgb24gdGhlIG1vZGFsIHdpbmRvdy5cclxuICAgKlxyXG4gICAqIEBzaW5jZSA2LjEuMFxyXG4gICAqL1xyXG4gIGFyaWFEZXNjcmliZWRCeT86IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogSWYgYHRydWVgLCB0aGUgYmFja2Ryb3AgZWxlbWVudCB3aWxsIGJlIGNyZWF0ZWQgZm9yIGEgZ2l2ZW4gbW9kYWwuXHJcbiAgICpcclxuICAgKiBBbHRlcm5hdGl2ZWx5LCBzcGVjaWZ5IGAnc3RhdGljJ2AgZm9yIGEgYmFja2Ryb3Agd2hpY2ggZG9lc24ndCBjbG9zZSB0aGUgbW9kYWwgb24gY2xpY2suXHJcbiAgICpcclxuICAgKiBEZWZhdWx0IHZhbHVlIGlzIGB0cnVlYC5cclxuICAgKi9cclxuICBiYWNrZHJvcD86IGJvb2xlYW4gfCAnc3RhdGljJztcclxuXHJcbiAgLyoqXHJcbiAgICogQ2FsbGJhY2sgcmlnaHQgYmVmb3JlIHRoZSBtb2RhbCB3aWxsIGJlIGRpc21pc3NlZC5cclxuICAgKlxyXG4gICAqIElmIHRoaXMgZnVuY3Rpb24gcmV0dXJuczpcclxuICAgKiAqIGBmYWxzZWBcclxuICAgKiAqIGEgcHJvbWlzZSByZXNvbHZlZCB3aXRoIGBmYWxzZWBcclxuICAgKiAqIGEgcHJvbWlzZSB0aGF0IGlzIHJlamVjdGVkXHJcbiAgICpcclxuICAgKiB0aGVuIHRoZSBtb2RhbCB3b24ndCBiZSBkaXNtaXNzZWQuXHJcbiAgICovXHJcbiAgYmVmb3JlRGlzbWlzcz86ICgpID0+IGJvb2xlYW4gfCBQcm9taXNlPGJvb2xlYW4+O1xyXG5cclxuICAvKipcclxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBtb2RhbCB3aWxsIGJlIGNlbnRlcmVkIHZlcnRpY2FsbHkuXHJcbiAgICpcclxuICAgKiBEZWZhdWx0IHZhbHVlIGlzIGBmYWxzZWAuXHJcbiAgICpcclxuICAgKiBAc2luY2UgMS4xLjBcclxuICAgKi9cclxuICBjZW50ZXJlZD86IGJvb2xlYW47XHJcblxyXG4gIC8qKlxyXG4gICAqIEEgc2VsZWN0b3Igc3BlY2lmeWluZyB0aGUgZWxlbWVudCBhbGwgbmV3IG1vZGFsIHdpbmRvd3Mgc2hvdWxkIGJlIGFwcGVuZGVkIHRvLlxyXG4gICAqIFNpbmNlIHY1LjMuMCBpdCBpcyBhbHNvIHBvc3NpYmxlIHRvIHBhc3MgdGhlIHJlZmVyZW5jZSB0byBhbiBgSFRNTEVsZW1lbnRgLlxyXG4gICAqXHJcbiAgICogSWYgbm90IHNwZWNpZmllZCwgd2lsbCBiZSBgYm9keWAuXHJcbiAgICovXHJcbiAgY29udGFpbmVyPzogc3RyaW5nIHwgSFRNTEVsZW1lbnQ7XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBgSW5qZWN0b3JgIHRvIHVzZSBmb3IgbW9kYWwgY29udGVudC5cclxuICAgKi9cclxuICBpbmplY3Rvcj86IEluamVjdG9yO1xyXG5cclxuICAvKipcclxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBtb2RhbCB3aWxsIGJlIGNsb3NlZCB3aGVuIGBFc2NhcGVgIGtleSBpcyBwcmVzc2VkXHJcbiAgICpcclxuICAgKiBEZWZhdWx0IHZhbHVlIGlzIGB0cnVlYC5cclxuICAgKi9cclxuICBrZXlib2FyZD86IGJvb2xlYW47XHJcblxyXG4gIC8qKlxyXG4gICAqIFNjcm9sbGFibGUgbW9kYWwgY29udGVudCAoZmFsc2UgYnkgZGVmYXVsdCkuXHJcbiAgICpcclxuICAgKiBAc2luY2UgNS4wLjBcclxuICAgKi9cclxuICBzY3JvbGxhYmxlPzogYm9vbGVhbjtcclxuXHJcbiAgLyoqXHJcbiAgICogU2l6ZSBvZiBhIG5ldyBtb2RhbCB3aW5kb3cuXHJcbiAgICovXHJcbiAgc2l6ZT86ICdzbScgfCAnbGcnIHwgJ3hsJyB8IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogQSBjdXN0b20gY2xhc3MgdG8gYXBwZW5kIHRvIHRoZSBtb2RhbCB3aW5kb3cuXHJcbiAgICovXHJcbiAgd2luZG93Q2xhc3M/OiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIEEgY3VzdG9tIGNsYXNzIHRvIGFwcGVuZCB0byB0aGUgbW9kYWwgZGlhbG9nLlxyXG4gICAqXHJcbiAgICogQHNpbmNlIDkuMS4wXHJcbiAgICovXHJcbiAgbW9kYWxEaWFsb2dDbGFzcz86IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogQSBjdXN0b20gY2xhc3MgdG8gYXBwZW5kIHRvIHRoZSBtb2RhbCBiYWNrZHJvcC5cclxuICAgKlxyXG4gICAqIEBzaW5jZSAxLjEuMFxyXG4gICAqL1xyXG4gIGJhY2tkcm9wQ2xhc3M/OiBzdHJpbmc7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBIGNvbmZpZ3VyYXRpb24gc2VydmljZSBmb3IgdGhlIFtgTmdiTW9kYWxgXSgjL2NvbXBvbmVudHMvbW9kYWwvYXBpI05nYk1vZGFsKSBzZXJ2aWNlLlxyXG4gKlxyXG4gKiBZb3UgY2FuIGluamVjdCB0aGlzIHNlcnZpY2UsIHR5cGljYWxseSBpbiB5b3VyIHJvb3QgY29tcG9uZW50LCBhbmQgY3VzdG9taXplIHRoZSB2YWx1ZXMgb2YgaXRzIHByb3BlcnRpZXMgaW5cclxuICogb3JkZXIgdG8gcHJvdmlkZSBkZWZhdWx0IHZhbHVlcyBmb3IgYWxsIG1vZGFscyB1c2VkIGluIHRoZSBhcHBsaWNhdGlvbi5cclxuKlxyXG4qIEBzaW5jZSAzLjEuMFxyXG4qL1xyXG5ASW5qZWN0YWJsZSh7cHJvdmlkZWRJbjogJ3Jvb3QnfSlcclxuZXhwb3J0IGNsYXNzIE5nYk1vZGFsQ29uZmlnIGltcGxlbWVudHMgUmVxdWlyZWQ8TmdiTW9kYWxPcHRpb25zPiB7XHJcbiAgYXJpYUxhYmVsbGVkQnk6IHN0cmluZztcclxuICBhcmlhRGVzY3JpYmVkQnk6IHN0cmluZztcclxuICBiYWNrZHJvcDogYm9vbGVhbiB8ICdzdGF0aWMnID0gdHJ1ZTtcclxuICBiZWZvcmVEaXNtaXNzOiAoKSA9PiBib29sZWFuIHwgUHJvbWlzZTxib29sZWFuPjtcclxuICBjZW50ZXJlZDogYm9vbGVhbjtcclxuICBjb250YWluZXI6IHN0cmluZztcclxuICBpbmplY3RvcjogSW5qZWN0b3I7XHJcbiAga2V5Ym9hcmQgPSB0cnVlO1xyXG4gIHNjcm9sbGFibGU6IGJvb2xlYW47XHJcbiAgc2l6ZTogJ3NtJyB8ICdsZycgfCAneGwnIHwgc3RyaW5nO1xyXG4gIHdpbmRvd0NsYXNzOiBzdHJpbmc7XHJcbiAgbW9kYWxEaWFsb2dDbGFzczogc3RyaW5nO1xyXG4gIGJhY2tkcm9wQ2xhc3M6IHN0cmluZztcclxuXHJcbiAgcHJpdmF0ZSBfYW5pbWF0aW9uOiBib29sZWFuO1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9uZ2JDb25maWc6IE5nYkNvbmZpZykge31cclxuXHJcbiAgZ2V0IGFuaW1hdGlvbigpOiBib29sZWFuIHsgcmV0dXJuICh0aGlzLl9hbmltYXRpb24gPT09IHVuZGVmaW5lZCkgPyB0aGlzLl9uZ2JDb25maWcuYW5pbWF0aW9uIDogdGhpcy5fYW5pbWF0aW9uOyB9XHJcbiAgc2V0IGFuaW1hdGlvbihhbmltYXRpb246IGJvb2xlYW4pIHsgdGhpcy5fYW5pbWF0aW9uID0gYW5pbWF0aW9uOyB9XHJcbn1cclxuIl19